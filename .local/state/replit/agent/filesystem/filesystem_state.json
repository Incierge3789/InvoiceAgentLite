{"file_contents":{"README.md":{"content":"# InvoiceAgent Lite\n\nA FastAPI-based PDF invoice processing system that extracts financial data from PDF invoices and automatically saves the results to Google Sheets.\n\n## Features\n\n- **PDF Upload**: Web interface with drag & drop support for multiple PDF files\n- **Text Extraction**: Uses pdfminer.six to extract text from PDF files\n- **Smart Data Extraction**: Automatically extracts:\n  - Invoice amounts (¥, JPY, 合計, 請求金額)\n  - Issue dates (multiple formats supported)\n  - Vendor names (using predefined hints and heuristics)\n- **Google Sheets Integration**: Automatically appends extracted data to a Google Sheet\n- **Confidence Scoring**: Calculates confidence scores and flags entries needing review\n- **File Validation**: Ensures only PDF files under 3MB are processed\n- **Health Monitoring**: Health check and self-check endpoints\n\n## Setup Instructions\n\n### 1. Environment Variables (Replit Secrets)\n\nSet the following secrets in your Replit environment:\n\n#### Required Secrets:\n\n- **`SHEET_ID`**: The Google Sheets ID where data will be appended\n  - Example: `1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms`\n  - Found in the Google Sheets URL: `https://docs.google.com/spreadsheets/d/{SHEET_ID}/edit`\n\n- **`GOOGLE_SERVICE_ACCOUNT_JSON`**: Service account credentials as JSON string\n  - Create a service account in Google Cloud Console\n  - Download the JSON key file\n  - Copy the entire JSON content as a string (including curly braces)\n  - Example format: `{\"type\": \"service_account\", \"project_id\": \"...\", ...}`\n\n#### Optional Secrets:\n\n- **`ADMIN_PASSWORD`**: Password for the `/selfcheck` endpoint (defaults to \"default_admin_password\")\n\n### 2. Google Sheets Setup\n\n1. **Create a Google Sheet** with the following column headers in row 1:\n   ```\n   timestamp | filename | vendor | issue_date | amount | confidence | needs_review | raw_excerpt\n   ```\n\n2. **Share the sheet** with your service account email:\n   - Open your Google Sheet\n   - Click \"Share\" button\n   - Add the service account email (found in your JSON credentials under \"client_email\")\n   - Give \"Editor\" permissions\n\n3. **Get the Sheet ID**:\n   - Copy the ID from your sheet URL and set it as the `SHEET_ID` secret\n\n### 3. Service Account Setup\n\n1. **Create a Google Cloud Project** (if you don't have one)\n2. **Enable the Google Sheets API**:\n   - Go to Google Cloud Console → APIs & Services → Library\n   - Search for \"Google Sheets API\" and enable it\n3. **Create a Service Account**:\n   - Go to IAM & Admin → Service Accounts\n   - Click \"Create Service Account\"\n   - Give it a name (e.g., \"invoice-processor\")\n   - Skip role assignment (not needed for Sheets)\n4. **Generate a JSON Key**:\n   - Click on your service account\n   - Go to \"Keys\" tab → \"Add Key\" → \"Create new key\" → JSON\n   - Download the JSON file\n   - Copy the entire JSON content as a string into the `GOOGLE_SERVICE_ACCOUNT_JSON` secret\n\n### 4. Deployment\n\n#### For Replit Autoscale:\n1. Set the health check path to `/healthz`\n2. The app will automatically bind to port 5000\n3. All secrets should be configured in Replit Secrets\n\n#### For other platforms:\n- Ensure port 5000 is accessible\n- Set environment variables instead of Replit secrets\n- Install dependencies: `pip install fastapi uvicorn[standard] pdfminer.six google-api-python-client google-auth python-multipart`\n\n## API Endpoints\n\n### `GET /healthz`\nHealth check endpoint that returns `{\"ok\": true}`.\n\n### `GET /upload`\nServes the web interface for uploading PDF files.\n\n### `POST /api/upload`\nProcesses uploaded PDF files and returns extraction results.\n\n**Request**: Multipart form data with PDF files\n**Response**: JSON with extraction results\n\n### `GET /selfcheck?pw=PASSWORD`\nAdministrative endpoint that adds a test row to the Google Sheet.\n\n**Parameters**: `pw` - Admin password (set via `ADMIN_PASSWORD` secret)\n\n## File Processing Limits\n\n- **File Type**: PDF only (checked by MIME type and extension)\n- **File Size**: Maximum 3MB per file\n- **Multiple Files**: Supported (drag & drop or browse)\n- **Processing**: Files are temporarily stored during processing and automatically deleted\n\n## Data Extraction Patterns\n\n### Amount Extraction\n- `合計[\\\\s:：]*([\\\\d,]+\\\\.?\\\\d*)`\n- `請求金額[\\\\s:：]*([\\\\d,]+\\\\.?\\\\d*)`\n- `¥\\\\s?([\\\\d,]+)`\n- `JPY\\\\s?([\\\\d,]+)`\n\n### Date Extraction\n- `発行日[:：]?\\\\s?(\\\\d{4}[/-]\\\\d{1,2}[/-]\\\\d{1,2})`\n- `(\\\\d{4}[.-]\\\\d{1,2}[.-]\\\\d{1,2})`\n- `(\\\\d{4}年\\\\d{1,2}月\\\\d{1,2}日)`\n\n### Vendor Extraction\n- Predefined company names (Amazon, Google, Meta, etc.)\n- Heuristic extraction from document header\n\n## Confidence Scoring\n\n- **Score Range**: 0.00 to 1.00\n- **Calculation**: (Number of successfully extracted fields) / 3\n- **Review Flag**: Set to \"TRUE\" if confidence < 0.67\n\n## Error Handling\n\n### Common Issues and Solutions:\n\n1. **\"Google Sheets service not available\"**:\n   - Check that `GOOGLE_SERVICE_ACCOUNT_JSON` is properly set\n   - Verify JSON format is correct (valid JSON string)\n   - Ensure service account has been created\n\n2. **\"Failed to append to sheet\"**:\n   - Verify `SHEET_ID` is correct\n   - Check that service account email has \"Editor\" access to the sheet\n   - Ensure Google Sheets API is enabled in your project\n\n3. **\"Invalid PDF file format\"**:\n   - File may be corrupted or password-protected\n   - Ensure file is a proper PDF with extractable text\n\n4. **\"File size exceeds 3MB limit\"**:\n   - Compress PDF or split into smaller files\n   - This is a deliberate limit for the Lite version\n\n### HTTP Status Codes:\n- `200`: Success\n- `400`: Bad request (no files, invalid format)\n- `401`: Unauthorized (wrong admin password)\n- `422`: Unprocessable entity (file validation failed)\n- `500`: Internal server error\n\n## Monitoring and Logs\n\n- Processing time is logged for each file\n- Extraction results are logged with confidence scores\n- Failed operations are logged with error details\n- Use `/selfcheck` endpoint to verify Google Sheets integration\n\n## Limitations (Lite Version)\n\n- Text-based PDF extraction only (no OCR for image-based PDFs)\n- No email integration or automated fetching\n- No Slack notifications\n- 3MB file size limit per upload\n- Basic vendor recognition patterns\n\n## Support\n\nFor issues with:\n- **PDF extraction**: Ensure PDFs contain extractable text (not scanned images)\n- **Google Sheets**: Verify service account permissions and API access\n- **File uploads**: Check file format and size constraints\n- **Missing data**: Review confidence scores and use manual review for low-confidence extractions\n\n## Development\n\nTo run locally:\n```bash\npip install fastapi uvicorn[standard] pdfminer.six google-api-python-client google-auth python-multipart\npython main.py\n","size_bytes":6678},"app.py":{"content":"import os\nimport json\nimport tempfile\nimport logging\nimport re\nfrom datetime import datetime, timezone\nfrom typing import Optional, Dict, Any\nimport time\n\nfrom flask import Flask, request, jsonify, render_template_string, Response, redirect, session\nfrom werkzeug.utils import secure_filename\nfrom flask_cors import CORS\nimport secrets\n\nimport PyPDF2\nimport io\n\nfrom google.oauth2 import service_account\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\nimport gspread\nimport csv\nfrom io import StringIO\n\n# Validation constants\nMAX_FILES = 10\nMAX_SIZE = 3 * 1024 * 1024  # 3MB\nALLOWED_EXT = {'.pdf'}\nALLOWED_MIME = {'application/pdf'}\n\n# Japanese invoice extraction rule pack\nimport re, unicodedata\nAMOUNT_RE = re.compile(r'(?:ご?\\s*請求(?:金額|合計)|税込?合計|合計)[^\\d]*(\\d{1,3}(?:,\\d{3})+|\\d+)\\s*円?')\nDATE_RE   = re.compile(r'(?:発行日|請求日|納品日|支払期限)[^\\d]*(\\d{4}[./年]\\s*\\d{1,2}[./月]\\s*\\d{1,2}日?)')\nVENDOR_RE = re.compile(r'(?:株式会社|有限会社|合同会社)[^\\n]+|.+?御中')\ndef _normalize(txt: str) -> str:\n    import unicodedata, re\n    t = unicodedata.normalize('NFKC', txt).replace('\\u3000',' ')\n    return re.sub(r'[ \\t]+', ' ', t)\ndef extract_fields_jp(text: str):\n    t = _normalize(text)\n    amount = None\n    m = AMOUNT_RE.search(t)\n    if m: amount = int(m.group(1).replace(',', ''))\n    date = None\n    dm = DATE_RE.search(t)\n    if dm:\n        date = dm.group(1)\n        date = (date.replace('年','-').replace('月','-').replace('日','')\n                    .replace('/','-').replace('.','-'))\n        import re\n        date = re.sub(r'\\s+', '', date)\n    vendor = None\n    head = '\\n'.join(t.splitlines()[:20])\n    vm = VENDOR_RE.search(head)\n    if vm: vendor = vm.group(0).replace('御中','').strip()\n    score = sum(x is not None for x in [amount, date, vendor]) / 3\n    return {\n        \"amount\": amount, \"date\": date, \"vendor\": vendor,\n        \"confidence\": round(score, 2),\n        \"needs_review\": \"TRUE\" if score < 0.8 else \"FALSE\",\n    }\n\n# Config helpers\ndef load_config():\n    \"\"\"Load config from data/config.json and environment variables\"\"\"\n    config = {}\n    \n    # Try to load from data/config.json first\n    try:\n        if os.path.exists('data/config.json'):\n            with open('data/config.json', 'r') as f:\n                config = json.load(f)\n    except Exception as e:\n        logger.warning(f\"Failed to load config.json: {e}\")\n    \n    # Override with environment variables if present\n    if os.getenv('GSPREAD_CREDENTIALS_JSON'):\n        config['service_account_json'] = os.getenv('GSPREAD_CREDENTIALS_JSON')\n    if os.getenv('SHEET_ID'):\n        config['sheet_id'] = os.getenv('SHEET_ID')\n    if os.getenv('SHEET_NAME'):\n        config['sheet_name'] = os.getenv('SHEET_NAME')\n        \n    return config\n\ndef get_worksheet():\n    \"\"\"Get worksheet from gspread using current config\"\"\"\n    config = load_config()\n    \n    if not config.get('service_account_json') or not config.get('sheet_id'):\n        return None\n    \n    try:\n        creds = service_account.Credentials.from_service_account_info(\n            json.loads(config['service_account_json']),\n            scopes=['https://www.googleapis.com/auth/spreadsheets']\n        )\n        gc = gspread.authorize(creds)\n        sheet = gc.open_by_key(config['sheet_id'])\n        worksheet_name = config.get('sheet_name', 'invoices')\n        \n        try:\n            worksheet = sheet.worksheet(worksheet_name)\n        except gspread.WorksheetNotFound:\n            # Create worksheet if it doesn't exist\n            worksheet = sheet.add_worksheet(title=worksheet_name, rows=\"1000\", cols=\"20\")\n            # Add headers\n            headers = ['timestamp', 'file', 'vendor', 'date', 'amount', 'currency', 'category', 'description', 'notes', 'confidence', 'needs_review', 'raw_excerpt', 'source']\n            worksheet.append_row(headers)\n            \n        return worksheet\n    except Exception as e:\n        logger.error(f\"Failed to get worksheet: {e}\")\n        return None\n\ndef save_row_to_sheet(payload):\n    \"\"\"Save data to Google Sheets with 13 columns\"\"\"\n    worksheet = get_worksheet()\n    if not worksheet:\n        return False\n    \n    try:\n        timestamp = datetime.now(timezone.utc).isoformat()\n        row = [\n            timestamp,\n            payload.get('file', ''),\n            payload.get('vendor', ''),\n            payload.get('date', ''),\n            payload.get('amount', ''),\n            'JPY',\n            '',  # category\n            '',  # description  \n            '',  # notes\n            payload.get('confidence', ''),\n            payload.get('needs_review', ''),\n            payload.get('raw_excerpt', '')[:500],\n            'upload'\n        ]\n        worksheet.append_row(row)\n        return True\n    except Exception as e:\n        logger.error(f\"Failed to save row to sheet: {e}\")\n        return False\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\n# Initialize Flask app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SECRET_KEY\", \"dev\")\napp.config['MAX_CONTENT_LENGTH'] = 30 * 1024 * 1024  # up to 10 files x 3MB\n\n# Add CORS\nCORS(app, origins=[\"*\"])\n\n# In-memory storage for session results\n_STORE = {}  # { sid: [row, ...] }\nCOLS = [\"file\",\"date\",\"amount\",\"vendor\",\"confidence\",\"needs_review\",\"raw_excerpt\"]\n\ndef _sid():\n    if \"sid\" not in session:\n        session[\"sid\"] = secrets.token_hex(16)\n    return session[\"sid\"]\n\ndef _bucket():\n    return _STORE.setdefault(_sid(), [])\n\n# Configuration from environment variables\nSHEET_ID = os.getenv(\"SHEET_ID\", \"\")\nGOOGLE_SERVICE_ACCOUNT_JSON = os.getenv(\"GOOGLE_SERVICE_ACCOUNT_JSON\", \"\")\nADMIN_PASSWORD = os.getenv(\"ADMIN_PASSWORD\", \"default_admin_password\")\n\n# Constants\nMAX_FILE_SIZE = 3 * 1024 * 1024  # 3MB\nALLOWED_EXTENSIONS = {'pdf'}\n\n# Vendor hints for extraction\nVENDOR_HINTS = [\n    \"Amazon\", \"Google\", \"Meta\", \"Facebook\", \"Slack\", \"Cloudflare\",\n    \"ヤマト運輸\", \"日本郵便\", \"佐川急便\", \"楽天\", \"LINE\", \"Microsoft\",\n    \"Apple\", \"Netflix\", \"Adobe\", \"Salesforce\", \"Zoom\", \"GitHub\"\n]\n\n# Regex patterns for extraction\nAMOUNT_PATTERNS = [\n    r\"合計[\\s:：]*([\\\\d,]+\\.?\\d*)\",\n    r\"請求金額[\\s:：]*([\\\\d,]+\\.?\\d*)\",\n    r\"¥\\s?([\\\\d,]+)\",\n    r\"JPY\\s?([\\\\d,]+)\"\n]\n\nDATE_PATTERNS = [\n    r\"発行日[:：]?\\s?(\\d{4}[/-]\\d{1,2}[/-]\\d{1,2})\",\n    r\"(\\d{4}[.-]\\d{1,2}[.-]\\d{1,2})\",\n    r\"(\\d{4}年\\d{1,2}月\\d{1,2}日)\"\n]\n\nclass InvoiceProcessor:\n    def __init__(self):\n        self.sheets_service = None\n        self._initialize_sheets_service()\n    \n    def _initialize_sheets_service(self):\n        \"\"\"Initialize Google Sheets service with service account credentials\"\"\"\n        if not GOOGLE_SERVICE_ACCOUNT_JSON or not SHEET_ID:\n            logger.warning(\"Google Sheets credentials or Sheet ID not configured\")\n            return\n        \n        try:\n            credentials_dict = json.loads(GOOGLE_SERVICE_ACCOUNT_JSON)\n            credentials = service_account.Credentials.from_service_account_info(\n                credentials_dict,\n                scopes=['https://www.googleapis.com/auth/spreadsheets']\n            )\n            self.sheets_service = build('sheets', 'v4', credentials=credentials)\n            logger.info(\"Google Sheets service initialized successfully\")\n        except Exception as e:\n            logger.error(f\"Failed to initialize Google Sheets service: {e}\")\n            raise Exception(\"Failed to initialize Google Sheets service\")\n    \n    def extract_text_from_pdf(self, pdf_content: bytes) -> str:\n        \"\"\"Extract text from PDF content using PyPDF2\"\"\"\n        try:\n            pdf_file = io.BytesIO(pdf_content)\n            pdf_reader = PyPDF2.PdfReader(pdf_file)\n            \n            text = \"\"\n            for page in pdf_reader.pages:\n                text += page.extract_text() + \"\\n\"\n            \n            return text\n        except PyPDF2.errors.PdfReadError as e:\n            logger.error(f\"PDF read error: {e}\")\n            raise Exception(\"Invalid PDF file format or password-protected\")\n        except Exception as e:\n            logger.error(f\"Error extracting text from PDF: {e}\")\n            raise Exception(\"Failed to extract text from PDF\")\n    \n    def extract_amount(self, text: str) -> Optional[float]:\n        \"\"\"Extract amount from text using regex patterns\"\"\"\n        for pattern in AMOUNT_PATTERNS:\n            match = re.search(pattern, text, re.IGNORECASE)\n            if match:\n                amount_str = match.group(1).replace(',', '')\n                try:\n                    return float(amount_str)\n                except ValueError:\n                    continue\n        return None\n    \n    def extract_issue_date(self, text: str) -> Optional[str]:\n        \"\"\"Extract and normalize issue date from text\"\"\"\n        for pattern in DATE_PATTERNS:\n            match = re.search(pattern, text)\n            if match:\n                date_str = match.group(1)\n                # Normalize date format to ISO (YYYY-MM-DD)\n                try:\n                    # Handle different separators\n                    date_str = re.sub(r'[年月]', '-', date_str)\n                    date_str = re.sub(r'日', '', date_str)\n                    date_str = re.sub(r'[./]', '-', date_str)\n                    \n                    # Parse and format\n                    if '-' in date_str:\n                        parts = date_str.split('-')\n                        if len(parts) == 3:\n                            year, month, day = parts\n                            return f\"{year.zfill(4)}-{month.zfill(2)}-{day.zfill(2)}\"\n                except Exception as e:\n                    logger.warning(f\"Failed to normalize date {date_str}: {e}\")\n                    continue\n        return None\n    \n    def extract_vendor(self, text: str) -> Optional[str]:\n        \"\"\"Extract vendor from text using hints and heuristics\"\"\"\n        # First, check for vendor hints\n        for hint in VENDOR_HINTS:\n            if hint.lower() in text.lower():\n                return hint\n        \n        # If no hint found, extract from first 10 lines\n        lines = text.split('\\n')[:10]\n        for line in lines:\n            # Look for company-like patterns (alphanumeric + Japanese characters)\n            candidates = re.findall(r'[a-zA-Z0-9\\u3040-\\u309F\\u30A0-\\u30FF\\u4E00-\\u9FAF\\u3400-\\u4DBF]+', line.strip())\n            for candidate in candidates:\n                if len(candidate) >= 3 and len(candidate) <= 50:\n                    return candidate\n        \n        return None\n    \n    def calculate_confidence(self, amount: Optional[float], issue_date: Optional[str], vendor: Optional[str]) -> float:\n        \"\"\"Calculate confidence score based on extracted fields\"\"\"\n        hits = sum([1 for field in [amount, issue_date, vendor] if field is not None])\n        return round(hits / 3.0, 2)\n    \n    def process_pdf(self, filename: str, pdf_content: bytes) -> Dict[str, Any]:\n        \"\"\"Process a single PDF and extract invoice data\"\"\"\n        start_time = time.time()\n        \n        try:\n            # Extract text\n            text = self.extract_text_from_pdf(pdf_content)\n            \n            # Extract fields\n            amount = self.extract_amount(text)\n            issue_date = self.extract_issue_date(text)\n            vendor = self.extract_vendor(text)\n            \n            # Calculate confidence and review flag\n            confidence = self.calculate_confidence(amount, issue_date, vendor)\n            needs_review = \"TRUE\" if confidence < 0.67 else \"FALSE\"\n            \n            # Create raw excerpt (first 200 characters)\n            raw_excerpt = text[:200].strip()\n            if len(text) > 200:\n                raw_excerpt += \"...\"\n            \n            processing_time = round((time.time() - start_time) * 1000, 2)\n            logger.info(f\"Processed {filename} in {processing_time}ms - Amount: {amount}, Date: {issue_date}, Vendor: {vendor}, Confidence: {confidence}\")\n            \n            result = {\n                \"file\": filename,\n                \"vendor\": vendor,\n                \"date\": issue_date,\n                \"amount\": amount,\n                \"confidence\": confidence,\n                \"needs_review\": needs_review,\n                \"raw_excerpt\": raw_excerpt\n            }\n            \n            return result\n            \n        except Exception as e:\n            logger.error(f\"Error processing PDF {filename}: {e}\")\n            raise\n    \n    def append_to_sheet(self, data: Dict[str, Any]) -> bool:\n        \"\"\"Append data to Google Sheets\"\"\"\n        if not self.sheets_service:\n            logger.warning(\"Google Sheets service not available\")\n            return False\n        \n        try:\n            timestamp = datetime.now(timezone.utc).isoformat()\n            \n            values = [[\n                timestamp,\n                data[\"file\"],\n                data[\"vendor\"] or \"\",\n                data[\"date\"] or \"\",\n                data[\"amount\"] or \"\",\n                data[\"confidence\"],\n                data[\"needs_review\"],\n                data[\"raw_excerpt\"]\n            ]]\n            \n            body = {\n                'values': values\n            }\n            \n            result = self.sheets_service.spreadsheets().values().append(\n                spreadsheetId=SHEET_ID,\n                range='A:H',  # Columns A through H\n                valueInputOption='RAW',\n                body=body\n            ).execute()\n            \n            logger.info(f\"Appended row to sheet: {result.get('updates', {}).get('updatedRows', 0)} rows updated\")\n            return True\n            \n        except HttpError as e:\n            logger.error(f\"Google Sheets API error: {e}\")\n            return False\n        except Exception as e:\n            logger.error(f\"Error appending to sheet: {e}\")\n            return False\n\n# Initialize processor\nprocessor = InvoiceProcessor()\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\n@app.route(\"/healthz\", methods=['GET'])\ndef health_check():\n    \"\"\"Health check endpoint\"\"\"\n    return jsonify({\"ok\": True})\n\n@app.route(\"/selfcheck\", methods=['GET'])\ndef self_check():\n    \"\"\"Self check endpoint with authentication\"\"\"\n    pw = request.args.get('pw', '')\n    if pw != ADMIN_PASSWORD:\n        return jsonify({\"error\": \"Invalid password\"}), 401\n    \n    try:\n        # Create test data\n        test_data = {\n            \"file\": \"selfcheck_test.pdf\",\n            \"vendor\": \"Test Vendor\",\n            \"date\": datetime.now().strftime(\"%Y-%m-%d\"),\n            \"amount\": 1000.0,\n            \"confidence\": 1.0,\n            \"needs_review\": \"FALSE\",\n            \"raw_excerpt\": \"This is a self-check test entry generated by the system.\"\n        }\n        \n        # Append to sheet\n        success = processor.append_to_sheet(test_data)\n        \n        return jsonify({\n            \"ok\": True,\n            \"message\": \"Self-check completed\",\n            \"sheet_updated\": success,\n            \"test_data\": test_data\n        })\n        \n    except Exception as e:\n        logger.error(f\"Self-check failed: {e}\")\n        return jsonify({\"error\": f\"Self-check failed: {str(e)}\"}), 500\n\n@app.route(\"/settings\", methods=['GET'])\ndef settings_page():\n    \"\"\"Serve the settings page\"\"\"\n    config = load_config()\n    connected = bool(config.get('service_account_json') and config.get('sheet_id'))\n    \n    html_content = f\"\"\"\n    <!DOCTYPE html>\n    <html lang=\"ja\" data-bs-theme=\"dark\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>インボイス自動読取 Lite - 設定</title>\n        <link href=\"https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css\" rel=\"stylesheet\">\n    </head>\n    <body>\n        <div class=\"container mt-4\">\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h1 class=\"card-title mb-0\">Googleスプレッドシート連携</h1>\n                            <p class=\"card-text mb-0\">Googleスプレッドシートとの連携を設定します</p>\n                        </div>\n                        <div class=\"card-body\">\n                            <div class=\"alert {'alert-success' if connected else 'alert-warning'} mb-4\">\n                                <strong>状態:</strong> {'接続済み' if connected else '未接続'}\n                                {f'<br><small>Sheet ID: {config.get(\"sheet_id\", \"\")[:20]}...</small>' if connected else ''}\n                            </div>\n                            \n                            <form id=\"settingsForm\">\n                                <div class=\"mb-3\">\n                                    <label for=\"serviceAccountJson\" class=\"form-label\">サービスアカウントJSON</label>\n                                    <textarea class=\"form-control\" id=\"serviceAccountJson\" rows=\"8\" \n                                              placeholder=\"GoogleサービスアカウントのJSONキーをここに貼り付けてください...\">{'***hidden***' if config.get('service_account_json') else ''}</textarea>\n                                    <div class=\"form-text\">Google Cloud Console → IAM & Admin → Service Accounts からダウンロード</div>\n                                </div>\n                                \n                                <div class=\"mb-3\">\n                                    <label for=\"sheetId\" class=\"form-label\">シートID</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"sheetId\" \n                                           value=\"{config.get('sheet_id', '')}\" \n                                           placeholder=\"1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms\">\n                                    <div class=\"form-text\">GoogleスプレッドシートのURLから取得</div>\n                                </div>\n                                \n                                <div class=\"mb-3\">\n                                    <label for=\"sheetName\" class=\"form-label\">シート名</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"sheetName\" \n                                           value=\"{config.get('sheet_name', 'invoices')}\" \n                                           placeholder=\"invoices\">\n                                    <div class=\"form-text\">ワークシートのタブ名（デフォルト: invoices）</div>\n                                </div>\n                                \n                                <div class=\"alert alert-info mb-3\">\n                                    <strong>設定手順:</strong>\n                                    <ol class=\"mb-0 mt-2\">\n                                        <li>Google Cloud でサービスアカウントのJSONキーを作成</li>\n                                        <li>対象スプレッドシートにサービスアカウントのメールを「編集者」で共有</li>\n                                        <li>シートID（URLの /d/ と /edit の間）とシート名（タブ名）を入力して保存</li>\n                                    </ol>\n                                </div>\n                                \n                                <div class=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                                    <button type=\"button\" class=\"btn btn-outline-secondary\" id=\"clearBtn\">クリア</button>\n                                    <button type=\"submit\" class=\"btn btn-primary\" id=\"saveBtn\">\n                                        <span class=\"spinner-border spinner-border-sm me-2 d-none\" id=\"saveSpinner\"></span>\n                                        保存して接続テスト\n                                    </button>\n                                </div>\n                            </form>\n                            \n                            <div id=\"resultContainer\" class=\"mt-4 d-none\">\n                                <div class=\"alert\" id=\"resultAlert\"></div>\n                            </div>\n                            \n                            <div class=\"mt-4\">\n                                <a href=\"/upload\" class=\"btn btn-outline-primary\">← アップロード画面に戻る</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <script>\n            const settingsForm = document.getElementById('settingsForm');\n            const saveBtn = document.getElementById('saveBtn');\n            const clearBtn = document.getElementById('clearBtn');\n            const saveSpinner = document.getElementById('saveSpinner');\n            const resultContainer = document.getElementById('resultContainer');\n            const resultAlert = document.getElementById('resultAlert');\n            \n            const serviceAccountJson = document.getElementById('serviceAccountJson');\n            const sheetId = document.getElementById('sheetId');\n            const sheetName = document.getElementById('sheetName');\n\n            settingsForm.addEventListener('submit', async (e) => {{\n                e.preventDefault();\n                \n                saveBtn.disabled = true;\n                saveSpinner.classList.remove('d-none');\n                resultContainer.classList.add('d-none');\n                \n                const formData = {{\n                    service_account_json: serviceAccountJson.value.trim(),\n                    sheet_id: sheetId.value.trim(),\n                    sheet_name: sheetName.value.trim() || 'invoices'\n                }};\n                \n                try {{\n                    const response = await fetch('/settings', {{\n                        method: 'POST',\n                        headers: {{\n                            'Content-Type': 'application/json'\n                        }},\n                        body: JSON.stringify(formData)\n                    }});\n                    \n                    const result = await response.json();\n                    \n                    if (response.ok && result.ok) {{\n                        resultAlert.className = 'alert alert-success';\n                        resultAlert.textContent = '接続に成功しました。テスト行を書き込み後に削除しました。';\n                        setTimeout(() => location.reload(), 1500);\n                    }} else {{\n                        resultAlert.className = 'alert alert-danger';\n                        let errorMsg = result.error || '保存に失敗しました';\n                        if (errorMsg.includes('permission') || errorMsg.includes('Permission')) {{\n                            errorMsg = '権限エラー：スプレッドシートでサービスアカウントに編集権限を付与してください。';\n                        }} else if (errorMsg.includes('JSON') || errorMsg.includes('parse')) {{\n                            errorMsg = 'フォーマットエラー：有効なJSONではありません。';\n                        }} else if (errorMsg.includes('not found') || errorMsg.includes('Sheet')) {{\n                            errorMsg = 'シートが見つかりません。シートID/シート名を確認してください。';\n                        }}\n                        resultAlert.textContent = errorMsg;\n                    }}\n                    \n                    resultContainer.classList.remove('d-none');\n                }} catch (error) {{\n                    resultAlert.className = 'alert alert-danger';\n                    resultAlert.textContent = 'ネットワークエラー: ' + error.message;\n                    resultContainer.classList.remove('d-none');\n                }} finally {{\n                    saveBtn.disabled = false;\n                    saveSpinner.classList.add('d-none');\n                }}\n            }});\n\n            clearBtn.addEventListener('click', () => {{\n                if (confirm('Clear all settings?')) {{\n                    serviceAccountJson.value = '';\n                    sheetId.value = '';\n                    sheetName.value = 'invoices';\n                }}\n            }});\n        </script>\n    </body>\n    </html>\n    \"\"\"\n    return html_content\n\n@app.route(\"/settings\", methods=['POST'])\ndef save_settings():\n    \"\"\"Save settings and test connection\"\"\"\n    try:\n        data = request.get_json()\n        \n        if not data.get('service_account_json') or not data.get('sheet_id'):\n            return jsonify({\"error\": \"Service Account JSON and Sheet ID are required\"}), 400\n        \n        # Validate JSON format\n        try:\n            json.loads(data['service_account_json'])\n        except json.JSONDecodeError:\n            return jsonify({\"error\": \"Invalid JSON format in Service Account\"}), 400\n        \n        # Save to config file\n        os.makedirs('data', exist_ok=True)\n        with open('data/config.json', 'w') as f:\n            json.dump(data, f, indent=2)\n        \n        # Test connection\n        try:\n            creds = service_account.Credentials.from_service_account_info(\n                json.loads(data['service_account_json']),\n                scopes=['https://www.googleapis.com/auth/spreadsheets']\n            )\n            gc = gspread.authorize(creds)\n            sheet = gc.open_by_key(data['sheet_id'])\n            worksheet_name = data.get('sheet_name', 'invoices')\n            \n            try:\n                worksheet = sheet.worksheet(worksheet_name)\n            except gspread.WorksheetNotFound:\n                worksheet = sheet.add_worksheet(title=worksheet_name, rows=\"1000\", cols=\"20\")\n                headers = ['timestamp', 'file', 'vendor', 'date', 'amount', 'currency', 'category', 'description', 'notes', 'confidence', 'needs_review', 'raw_excerpt', 'source']\n                worksheet.append_row(headers)\n            \n            # Test with a quick row insertion and deletion\n            test_timestamp = datetime.now(timezone.utc).isoformat()\n            test_row = ['invoiceagent:test', test_timestamp]\n            worksheet.append_row(test_row)\n            \n            # Find and delete the test row\n            rows = worksheet.get_all_values()\n            for i, row in enumerate(rows):\n                if len(row) >= 2 and row[0] == 'invoiceagent:test' and row[1] == test_timestamp:\n                    worksheet.delete_rows(i + 1)\n                    break\n            \n            return jsonify({\"ok\": True, \"message\": \"Settings saved and connection tested successfully\"})\n            \n        except Exception as e:\n            return jsonify({\"error\": f\"Connection test failed: {str(e)}\"}), 400\n        \n    except Exception as e:\n        logger.error(f\"Settings save error: {e}\")\n        return jsonify({\"error\": f\"Failed to save settings: {str(e)}\"}), 500\n\n@app.route(\"/download_csv\", methods=['POST'])\ndef download_csv():\n    \"\"\"Generate CSV download for a single result\"\"\"\n    try:\n        data = request.get_json()\n        \n        # Create CSV content with 13 columns\n        output = StringIO()\n        writer = csv.writer(output)\n        \n        # Headers\n        headers = ['timestamp', 'file', 'vendor', 'date', 'amount', 'currency', 'category', 'description', 'notes', 'confidence', 'needs_review', 'raw_excerpt', 'source']\n        writer.writerow(headers)\n        \n        # Data row\n        timestamp = datetime.now(timezone.utc).isoformat()\n        row = [\n            timestamp,\n            data.get('file', ''),\n            data.get('vendor', ''),\n            data.get('date', ''),\n            data.get('amount', ''),\n            'JPY',\n            '',  # category\n            '',  # description  \n            '',  # notes\n            data.get('confidence', ''),\n            data.get('needs_review', ''),\n            data.get('raw_excerpt', '')[:500],\n            'upload'\n        ]\n        writer.writerow(row)\n        \n        output.seek(0)\n        csv_content = output.getvalue()\n        \n        filename = f\"invoice_{data.get('file', 'data')}.csv\"\n        \n        return Response(\n            csv_content,\n            mimetype='text/csv',\n            headers={\"Content-disposition\": f\"attachment; filename={filename}\"}\n        )\n        \n    except Exception as e:\n        logger.error(f\"CSV download error: {e}\")\n        return jsonify({\"error\": f\"Failed to generate CSV: {str(e)}\"}), 500\n\n\n@app.route(\"/\", methods=['GET'])\ndef index():\n    \"\"\"Redirect to upload page\"\"\"\n    return redirect('/upload')\n\n@app.route(\"/upload\", methods=['GET'])\ndef upload_page():\n    \"\"\"Serve the upload page\"\"\"\n    html_content = \"\"\"\n    <!DOCTYPE html>\n    <html lang=\"ja\" data-bs-theme=\"dark\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>インボイス自動読取 Lite - PDF アップロード</title>\n        <link href=\"https://cdn.replit.com/agent/bootstrap-agent-dark-theme.min.css\" rel=\"stylesheet\">\n        <style>\n            .drop-zone {\n                border: 2px dashed var(--bs-border-color);\n                border-radius: 0.375rem;\n                padding: 3rem;\n                text-align: center;\n                transition: border-color 0.15s ease-in-out, background-color 0.15s ease-in-out;\n                background-color: var(--bs-body-bg);\n            }\n            .drop-zone:hover, .drop-zone.dragover {\n                border-color: var(--bs-primary);\n                background-color: var(--bs-primary-bg-subtle);\n            }\n            .file-list {\n                max-height: 200px;\n                overflow-y: auto;\n            }\n            .result-container {\n                max-height: 400px;\n                overflow-y: auto;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container mt-4\">\n            <div class=\"row justify-content-center\">\n                <div class=\"col-lg-8\">\n                    <div class=\"card\">\n                        <div class=\"card-header d-flex justify-content-between align-items-center\">\n                            <div>\n                                <h1 class=\"card-title mb-0\">インボイス自動読取 Lite</h1>\n                                <p class=\"card-text mb-0\">PDFの請求書から自動でデータを抽出します</p>\n                            </div>\n                            <a href=\"/settings\" class=\"btn btn-outline-secondary btn-sm\">⚙️ 設定</a>\n                        </div>\n                        \n                        <!-- Error display container -->\n                        <div id=\"errorBox\" class=\"alert alert-danger alert-dismissible m-3 d-none\" role=\"alert\">\n                            <button type=\"button\" class=\"btn-close\" aria-label=\"Close\" onclick=\"document.getElementById('errorBox').style.display='none'\"></button>\n                        </div>\n                        \n                        <div class=\"card-body\">\n                            <form id=\"uploadForm\">\n                                <div class=\"drop-zone mb-3\" id=\"dropzone\">\n                                    <div class=\"mb-3\">\n                                        <svg width=\"48\" height=\"48\" fill=\"currentColor\" class=\"mb-3\">\n                                            <use href=\"#upload-icon\"/>\n                                        </svg>\n                                        <h5>ここにPDFをドラッグ＆ドロップ、またはクリックして選択</h5>\n                                        <p class=\"text-muted\">PDFのみ、最大10ファイル（各3MB）</p>\n                                    </div>\n                                    <input id=\"fileInput\" name=\"files\" type=\"file\" multiple accept=\".pdf,application/pdf\" hidden>\n                                    <button type=\"button\" class=\"btn btn-outline-primary\" id=\"pickBtn\">\n                                        📄 ファイルを選択（複数可）\n                                    </button>\n                                </div>\n                                \n                                <div id=\"selectedCount\" class=\"mb-2\"></div>\n                                <div id=\"selectedList\" class=\"file-list mb-3\"></div>\n                                \n                                <div class=\"d-grid gap-2\">\n                                    <button id=\"uploadBtn\" type=\"button\" class=\"btn btn-primary w-100\">\n                                        <span class=\"spinner-border spinner-border-sm me-2 d-none\" id=\"uploadSpinner\"></span>\n                                        アップロードして解析\n                                    </button>\n                                </div>\n                                \n                                <div class=\"mt-2\">\n                                    <small class=\"text-muted\">※アップロードされたファイルはサーバーに保存せず、解析後に破棄します。</small>\n                                </div>\n                            </form>\n                            \n                            <div id=\"resultContainer\" class=\"mt-4 d-none\">\n                                <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                                    <h5>解析結果</h5>\n                                    <div>\n                                        <button type=\"button\" class=\"btn btn-outline-primary btn-sm me-2\" id=\"saveCsvBtn\">\n                                            結果をCSVで保存\n                                        </button>\n                                        <button type=\"button\" class=\"btn btn-outline-secondary btn-sm me-2\" id=\"saveJsonBtn\">\n                                            結果をJSONで保存\n                                        </button>\n                                        <button type=\"button\" class=\"btn btn-outline-danger btn-sm\" id=\"clearBtn\">\n                                            結果をクリア\n                                        </button>\n                                    </div>\n                                </div>\n                                \n                                <div class=\"table-responsive\">\n                                    <table class=\"table table-hover\">\n                                        <thead>\n                                            <tr>\n                                                <th>ファイル</th>\n                                                <th>日付</th>\n                                                <th>金額</th>\n                                                <th>発行元</th>\n                                                <th>信頼度</th>\n                                                <th>要確認</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody id=\"resultsBody\">\n                                        </tbody>\n                                    </table>\n                                </div>\n                                \n                                <div id=\"resultSummary\" class=\"alert alert-info mb-3 d-none\"></div>\n                                <pre id=\"resultOutput\" class=\"result-container bg-body-secondary p-3 rounded\"></pre>\n                            </div>\n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- SVG Icons -->\n        <svg style=\"display: none;\">\n            <defs>\n                <symbol id=\"upload-icon\" viewBox=\"0 0 16 16\">\n                    <path d=\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\"/>\n                    <path d=\"M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708l3-3z\"/>\n                </symbol>\n            </defs>\n        </svg>\n\n        <script src=\"{{ url_for('static', filename='upload.js') }}\" defer></script>\n    </body>\n    </html>\n    \"\"\"\n    return html_content\n\n@app.route(\"/api/upload\", methods=['POST'])\ndef upload_files():\n    \"\"\"Process uploaded PDF files with strict validation\"\"\"\n    files = request.files.getlist(\"files\")\n    \n    # Check if no files were provided\n    if not files or (len(files) == 1 and not files[0].filename):\n        return jsonify({\n            \"ok\": False, \n            \"errors\": [{\"file\": None, \"code\": \"NO_FILE\", \"message\": \"ファイルが選択されていません。\"}]\n        }), 400\n    \n    results = []\n    errors = []\n    \n    # Validate file count and keep only first MAX_FILES\n    if len(files) > MAX_FILES:\n        for i in range(MAX_FILES, len(files)):\n            errors.append({\n                \"file\": files[i].filename,\n                \"code\": \"TOO_MANY\", \n                \"message\": \"一度に選択できるのは最大10ファイルです。\"\n            })\n        files = files[:MAX_FILES]\n    \n    for file in files:\n        filename = secure_filename(file.filename) if file.filename else \"unknown.pdf\"\n        \n        try:\n            # Validate file type (extension and MIME)\n            if not file.filename:\n                errors.append({\n                    \"file\": filename,\n                    \"code\": \"INVALID_TYPE\",\n                    \"message\": \"PDFファイルのみ対応しています。\"\n                })\n                continue\n                \n            file_ext = os.path.splitext(file.filename.lower())[1]\n            if file_ext not in ALLOWED_EXT or file.content_type not in ALLOWED_MIME:\n                errors.append({\n                    \"file\": filename,\n                    \"code\": \"INVALID_TYPE\", \n                    \"message\": \"PDFファイルのみ対応しています。\"\n                })\n                continue\n            \n            # Read file content to check size\n            content = file.read()\n            \n            # Validate file size\n            if len(content) > MAX_SIZE:\n                errors.append({\n                    \"file\": filename,\n                    \"code\": \"TOO_LARGE\",\n                    \"message\": \"ファイルサイズが上限（3MB）を超えています。\"\n                })\n                continue\n            \n            # Extract text from PDF\n            text = processor.extract_text_from_pdf(content)\n            \n            # Use Japanese extraction rules\n            fields = extract_fields_jp(text)\n            \n            # Build row dict with all required fields\n            row = {\n                \"file\": filename,\n                \"date\": fields.get(\"date\"),\n                \"amount\": fields.get(\"amount\"), \n                \"vendor\": fields.get(\"vendor\"),\n                \"confidence\": fields.get(\"confidence\", 0.0),\n                \"needs_review\": fields.get(\"needs_review\", \"TRUE\"),\n                \"raw_excerpt\": text[:500]\n            }\n            \n            # Add to session bucket\n            _bucket().append(row)\n            results.append(row)\n            \n            # Try to save to Google Sheets if available\n            config = load_config()\n            if config.get('service_account_json') and config.get('sheet_id'):\n                try:\n                    save_row_to_sheet(row)\n                except Exception as e:\n                    logger.error(f\"Failed to save to sheets: {e}\")\n            \n        except Exception as e:\n            logger.error(f\"Error processing file {filename}: {e}\")\n            errors.append({\n                \"file\": filename,\n                \"code\": \"PROCESSING_ERROR\",\n                \"message\": f\"処理に失敗しました - {str(e)}\"\n            })\n    \n    # If all files failed, return error\n    if errors and not results:\n        return jsonify({\"ok\": False, \"errors\": errors}), 400\n    \n    # Return success with both results and errors (if any)\n    response = {\"ok\": True, \"results\": results}\n    if errors:\n        response[\"errors\"] = errors\n        \n    return jsonify(response)\n\n@app.route(\"/api/clear\", methods=['POST'])\ndef clear_results():\n    \"\"\"Clear current session results\"\"\"\n    _STORE[_sid()] = []\n    return jsonify({\"ok\": True})\n\n@app.route(\"/export/json\", methods=['GET'])\ndef export_json():\n    \"\"\"Export current results as JSON\"\"\"\n    results = _bucket()\n    if not results:\n        return jsonify({\"error\": \"No results to export\"}), 400\n    \n    filename = f\"invoices_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json\"\n    return Response(\n        json.dumps(results, ensure_ascii=False, indent=2),\n        mimetype='application/json',\n        headers={\"Content-Disposition\": f'attachment; filename=\"{filename}\"'}\n    )\n\n@app.route(\"/export/csv\", methods=['GET']) \ndef export_csv():\n    \"\"\"Export current results as CSV\"\"\"\n    results = _bucket()\n    if not results:\n        return jsonify({\"error\": \"No results to export\"}), 400\n    \n    output = io.StringIO()\n    writer = csv.writer(output)\n    \n    # Write header\n    writer.writerow(COLS)\n    \n    # Write data rows\n    for row in results:\n        writer.writerow([row.get(col, '') for col in COLS])\n    \n    output.seek(0)\n    csv_content = output.getvalue()\n    \n    filename = f\"invoices_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv\"\n    return Response(\n        csv_content,\n        mimetype='text/csv',\n        headers={\"Content-Disposition\": f'attachment; filename=\"{filename}\"'}\n    )\n\nif __name__ == \"__main__\":\n    port = int(os.getenv(\"PORT\", 5000))\n    app.run(host=\"0.0.0.0\", port=port, debug=True)","size_bytes":42005},"main.py":{"content":"# Import the Flask app from app.py\nfrom app import app","size_bytes":54},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"asgiref>=3.9.1\",\n    \"email-validator>=2.3.0\",\n    \"fastapi>=0.116.1\",\n    \"flask-cors>=6.0.1\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"google-api-python-client>=2.181.0\",\n    \"google-auth>=2.40.3\",\n    \"gunicorn>=23.0.0\",\n    \"pdfminer>=20191125\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pypdf2>=3.0.1\",\n    \"python-multipart>=0.0.20\",\n    \"uvicorn[standard]>=0.35.0\",\n    \"werkzeug>=3.1.3\",\n    \"gspread>=6.2.1\",\n]\n","size_bytes":576},"replit.md":{"content":"# Overview\n\nInvoiceAgent Lite is a FastAPI-based web application that processes PDF invoices by extracting financial data and automatically saving results to Google Sheets. The system provides a simple web interface for uploading PDF files, uses text extraction to identify invoice amounts, issue dates, and vendor names, then appends this structured data to a Google Sheet with confidence scoring for quality assessment.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Web Framework\n- **FastAPI** serves as the core web framework, providing RESTful API endpoints and serving a simple HTML upload interface\n- **CORS middleware** enables cross-origin requests for web browser compatibility\n- **File upload handling** supports multiple PDF files with drag-and-drop functionality\n\n## PDF Processing Pipeline\n- **Text extraction** uses pdfminer.six library to convert PDF content to plain text\n- **Pattern matching** employs regex patterns to identify key financial data:\n  - Invoice amounts (¥, JPY, 合計, 請求金額 patterns)\n  - Issue dates (multiple date formats including Japanese notation)\n  - Vendor names (predefined hints list + heuristic extraction)\n- **Confidence scoring** calculates quality metrics (0.00-1.00) based on successful field extraction\n- **Data validation** includes file size limits (3MB) and PDF-only restrictions\n\n## Data Storage Architecture\n- **Google Sheets integration** serves as the primary data store using Google Sheets API v4\n- **Service account authentication** eliminates need for OAuth flows\n- **Structured data format** with predefined columns: timestamp, filename, vendor, issue_date, amount, confidence, needs_review, raw_excerpt\n- **Append-only operations** add new records without modifying existing data\n\n## Security and Configuration\n- **Environment-based configuration** uses Replit Secrets for sensitive data\n- **Minimal authentication** protects administrative endpoints with simple password\n- **Temporary file handling** ensures uploaded PDFs are processed and immediately deleted\n\n## Error Handling and Monitoring\n- **Health check endpoints** provide system status monitoring\n- **Self-check functionality** validates Google Sheets connectivity and permissions\n- **Comprehensive logging** tracks processing operations and errors\n- **Graceful error handling** for PDF parsing failures and API errors\n\n# External Dependencies\n\n## Google Cloud Services\n- **Google Sheets API v4** for data storage and retrieval\n- **Google Cloud Service Account** for authentication and authorization\n- Requires service account JSON credentials with Sheets API access\n\n## Python Libraries\n- **FastAPI** - Web framework and API development\n- **uvicorn** - ASGI server for production deployment\n- **pdfminer.six** - PDF text extraction engine\n- **google-api-python-client** - Google APIs client library\n- **google-auth** - Google authentication library\n- **python-multipart** - File upload handling\n\n## Configuration Requirements\n- **SHEET_ID** - Target Google Sheets document identifier\n- **GOOGLE_SERVICE_ACCOUNT_JSON** - Service account credentials in JSON format\n- **ADMIN_PASSWORD** - Administrative endpoint protection (optional)\n\n## Deployment Platform\n- **Replit Autoscale** - Cloud hosting platform with automatic scaling\n- Environment supports Python runtime with package management\n- Secrets management for secure credential storage","size_bytes":3430},"static/upload.js":{"content":"'use strict';\n\n// --- constants (mirror of backend rules) ---\nconst MAX_FILES = 10;\nconst MAX_SIZE  = 3 * 1024 * 1024; // 3MB\nconst ALLOWED_EXT  = new Set(['.pdf']);\nconst ALLOWED_MIME = new Set(['application/pdf']);\n\n// --- elements ---\nconst dz    = document.getElementById('dropzone');\nconst input = document.getElementById('fileInput');\nconst pick  = document.getElementById('pickBtn');\nconst cnt   = document.getElementById('selectedCount');\nconst upBtn = document.getElementById('uploadBtn');\nconst clr   = document.getElementById('clearBtn');\nconst box   = document.getElementById('errorBox');\nconst tbody = document.getElementById('resultsBody');\nconst jsonBtn = document.getElementById('saveJsonBtn');\nconst csvBtn  = document.getElementById('saveCsvBtn');\n\n// --- state ---\nlet selected = [];   // File[]\nlet lastJson = null; // for export\n\nfunction extOf(name){\n  const i = name.lastIndexOf('.');\n  return i >= 0 ? name.slice(i).toLowerCase() : '';\n}\n\nfunction showErrors(messages){\n  if (!box) return;\n  if (!messages || messages.length === 0){\n    box.style.display = 'none';\n    box.innerHTML = '';\n    return;\n  }\n  box.style.display = 'block';\n  box.innerHTML = '<ul style=\"margin:0;padding-left:1rem;\">' +\n    messages.map(m => '<li>'+m+'</li>').join('') + '</ul>';\n}\n\nfunction renderSelected(){\n  const n = selected.length;\n  if (cnt) cnt.textContent = (n > 0 ? (n + 'ファイル選択') : '');\n  upBtn.disabled = (n === 0);\n}\n\nfunction clearAll(){\n  selected = [];\n  renderSelected();\n  showErrors([]);\n  if (input) input.value = '';\n  if (tbody) tbody.innerHTML = '';\n  lastJson = null;\n}\n\nfunction addFilesLike(list){\n  const errs = [];\n  const toAdd = [];\n  // count limit\n  if (selected.length + list.length > MAX_FILES){\n    errs.push('一度に選択できるのは最大10ファイルです。');\n  }\n  for (let i = 0; i < list.length; i++){\n    if (selected.length + toAdd.length >= MAX_FILES) break;\n    const f = list[i];\n    const ext = extOf(f.name);\n    if (!ALLOWED_EXT.has(ext) && !ALLOWED_MIME.has(f.type)){\n      errs.push('PDFファイルのみ対応しています：' + f.name);\n      continue;\n    }\n    if (f.size > MAX_SIZE){\n      errs.push('ファイルサイズが上限（3MB）を超えています：' + f.name);\n      continue;\n    }\n    toAdd.push(f);\n  }\n  // append\n  selected = selected.concat(toAdd);\n  renderSelected();\n  showErrors(errs);\n}\n\n// --- wire UI ---\nif (pick) pick.addEventListener('click', () => input && input.click());\n\nif (input) input.addEventListener('change', (e) => {\n  const files = e.target.files || [];\n  if (files.length === 0){\n    showErrors(['ファイルが選択されていません。']);\n    return;\n  }\n  addFilesLike(files);\n});\n\nif (dz){\n  ['dragenter','dragover'].forEach(ev =>\n    dz.addEventListener(ev, (e)=>{ e.preventDefault(); e.stopPropagation(); })\n  );\n  dz.addEventListener('drop', (e)=>{\n    e.preventDefault(); e.stopPropagation();\n    const files = e.dataTransfer && e.dataTransfer.files ? e.dataTransfer.files : [];\n    if (files.length === 0) return;\n    addFilesLike(files);\n  });\n}\n\nif (clr) clr.addEventListener('click', clearAll);\n\nif (upBtn) upBtn.addEventListener('click', async ()=>{\n  if (selected.length === 0){\n    showErrors(['ファイルが選択されていません。']);\n    return;\n  }\n  const fd = new FormData();\n  for (const f of selected){\n    fd.append('files', f, f.name);\n  }\n  upBtn.disabled = true;\n  showErrors([]);\n  try{\n    const res = await fetch('/api/upload', { method:'POST', body: fd });\n    const json = await res.json();\n    lastJson = json;\n    // render table (results only)\n    if (tbody){\n      tbody.innerHTML = '';\n      const rows = (json && json.results) ? json.results : [];\n      for (let i=0; i<rows.length; i++){\n        const r = rows[i];\n        const tr = document.createElement('tr');\n        function td(v){ const d=document.createElement('td'); d.textContent = (v==null?'':v); return d; }\n        tr.appendChild(td(r.file));\n        tr.appendChild(td(r.date));\n        tr.appendChild(td(r.amount!=null? (r.amount+'円') : ''));\n        tr.appendChild(td(r.vendor));\n        tr.appendChild(td(r.confidence));\n        tr.appendChild(td(r.needs_review ? 'はい':'いいえ'));\n        tbody.appendChild(tr);\n      }\n    }\n    // show API-side validation messages if any\n    if (json && json.errors && json.errors.length){\n      showErrors(json.errors.map(e => e.message));\n    }else{\n      showErrors([]);\n    }\n  }catch(err){\n    showErrors(['アップロード中にエラーが発生しました。']);\n  }finally{\n    upBtn.disabled = (selected.length === 0);\n  }\n});\n\n// exports\nfunction saveBlob(blob, name){\n  const a = document.createElement('a');\n  a.href = URL.createObjectURL(blob);\n  a.download = name;\n  a.click();\n  URL.revokeObjectURL(a.href);\n}\n\nif (jsonBtn) jsonBtn.addEventListener('click', ()=>{\n  if (!lastJson || !lastJson.results) return;\n  const b = new Blob([JSON.stringify(lastJson.results, null, 2)], {type:'application/json'});\n  const ts = new Date().toISOString().replace(/[:.]/g,'').slice(0,15);\n  saveBlob(b, 'invoices_' + ts + '.json');\n});\n\nif (csvBtn) csvBtn.addEventListener('click', ()=>{\n  if (!lastJson || !lastJson.results) return;\n  const rows = lastJson.results;\n  const header = ['file','date','amount','vendor','confidence','needs_review','raw_excerpt'];\n  const esc = (s)=> {\n    if (s==null) return '';\n    const t = String(s).replace(/\"/g,'\"\"');\n    return '\"' + t + '\"';\n  };\n  const lines = [header.join(',')];\n  for (const r of rows){\n    lines.push([\n      esc(r.file), esc(r.date), esc(r.amount),\n      esc(r.vendor), esc(r.confidence),\n      esc(r.needs_review ? 'TRUE':'FALSE'),\n      esc(r.raw_excerpt)\n    ].join(','));\n  }\n  const b = new Blob([lines.join('\\n')], {type:'text/csv;charset=utf-8'});\n  const ts = new Date().toISOString().replace(/[:.]/g,'').slice(0,15);\n  saveBlob(b, 'invoices_' + ts + '.csv');\n});\n\n// initial\nclearAll();","size_bytes":5955}},"version":1}