You are editing my Flask app “InvoiceAgent Lite”.
Goal: Add strict validations for multi-file upload on both UI and API.
Do not change any endpoint paths or response keys that already exist (keep /upload, /api/upload, /healthz, /settings, and result keys file,date,amount,vendor,confidence,needs_review,raw_excerpt).

What to implement
	1.	Validation rules (shared constants)

	•	MAX_FILES = 10
	•	MAX_SIZE = 3 * 1024 * 1024  (3MB)
	•	ALLOWED_EXT = {'.pdf'} and accept MIME application/pdf
Create these constants at the top of app.py and mirror them in the front-end JS.

	2.	Front-end (templates/upload.html + its JS)

	•	<input type="file" ...> must have multiple と accept=".pdf".
	•	When files are added (dialog or drag&drop), build an in-memory list selectedFiles as follows:
	•	If selectedFiles.length + newFiles.length > MAX_FILES, keep only the first MAX_FILES and record an error for the extra files.
	•	For each file, if not PDF by MIME and extension → mark error.
	•	If file.size > MAX_SIZE → mark error.
	•	Accumulate only valid files into selectedFiles. Invalid files are skipped.
	•	表示：
	•	ドロップゾーン下に「{n}ファイル選択」を表示（n は valid 数）。
	•	エラーがあれば上部に赤いアラート（dismiss 可）で一覧表示：
	•	非PDF: 「PDFファイルのみ対応しています。」
	•	サイズ超過: 「ファイルサイズが上限（3MB）を超えています。」
	•	上限超過: 「一度に選択できるのは最大10ファイルです。」
	•	「アップロードして解析」ボタンは selectedFiles.length >= 1 の時だけ有効。
	•	クリアボタンで selectedFiles=[]、エラー表示とカウント、テキストエリア、テーブルをリセット。
	•	フォーム送信時は FormData に files を 複数 append（forEach で formData.append('files', file, file.name)）。

	3.	Back-end（/api/upload の強制バリデーション）

	•	Read request.files.getlist('files').
	•	If len(files) == 0 → return 400 JSON: { "ok": false, "errors":[{"file": null, "code":"NO_FILE", "message":"ファイルが選択されていません。"}] }
	•	If len(files) > MAX_FILES → keep first MAX_FILES and record errors for the rest with code TOO_MANY.
	•	For each file:
	•	Check extension/MIME. If invalid → add to errors with code INVALID_TYPE.
	•	If size > MAX_SIZE → add to errors with code TOO_LARGE.
	•	Process only valid files（既存の抽出ロジックを流用）。
	•	Response format（互換維持）：
	•	通常は { "ok": true, "results": [ ... ] } に加えて errors があれば errors: [ {file, code, message} ] を 同じレスポンスに含める。
	•	すべて無効で結果が 0 件なら ok:false で 400 を返す（上記と同様の errors 付き）。

	4.	Japanese UI messages（固定文言）

	•	非PDF: PDFファイルのみ対応しています。
	•	サイズ超過: ファイルサイズが上限（3MB）を超えています。
	•	個数超過: 一度に選択できるのは最大10ファイルです。
	•	未選択: ファイルが選択されていません。

	5.	Acceptance criteria

	•	ダイアログでも D&D でも、PDF を 11 件選ぶと 10 件だけ残り、上に個数超過のエラーが出る。
	•	3MB 超の PDF は選択一覧に入らず、サイズエラーが出る。
	•	画像等の非PDFは入らず、非対応エラーが出る。
	•	ボタンは valid が 1 件以上で有効になる。
	•	API 側も同じルールで弾き、errors が JSON に返る（有効分は results に入る）。
	•	既存の CSV/JSON ダウンロードは results のみを対象（errors は含めない）。

Please implement, test with:
	•	11 PDFs（3MB 未満）→ 10 件処理＋1件エラー表示
	•	1 つ 4MB の PDF → 入らずサイズエラー
	•	JPG/PNG 混在 → 非PDFエラー
Paste back a short note listing the files you used and a screenshot showing the error banner and the table with valid rows.