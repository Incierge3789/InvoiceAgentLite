You are editing “InvoiceAgent Lite” (/upload page).
Fix two issues: (A) Upload button stays disabled after selecting files, (B) picking multiple files via dialog clears the selection. Keep Flask + gunicorn, endpoints unchanged. Only touch the upload UI (templates/upload.html) and its JS.

1) HTML tweaks
- Ensure the file input is:
  <input id="fileInput" name="files" type="file" accept="application/pdf" multiple>
- Ensure the process button is a plain button with a stable id and not a submit:
  <button id="uploadBtn" type="button" class="btn btn-primary w-100">アップロードして解析</button>
- If the “ファイルを選択（複数可）” trigger is an <a href="#"> or <button type="submit">, convert to either:
  (a) <label for="fileInput" class="btn btn-outline-light">ファイルを選択（複数可）</label>
  or keep it as <a> but handle click with preventDefault() (see JS).

2) JavaScript (in the same template; add or replace the current handlers)
<script>
(() => {
  const fileInput   = document.getElementById('fileInput');
  const uploadBtn   = document.getElementById('uploadBtn');
  const dropZone    = document.getElementById('dropZone');     // the dashed area
  const listBox     = document.getElementById('selectedList'); // a <div> or <ul> that shows selected file names
  const countBox    = document.getElementById('selectedCount'); // the “Nファイル選択” badge

  let selectedFiles = [];   // keep all chosen/dropped files in memory

  // --- helpers ---
  function updateButtonState() {
    // enable only when at least 1 file is selected
    uploadBtn.disabled = (selectedFiles.length === 0);
    uploadBtn.classList.toggle('disabled', selectedFiles.length === 0);
  }
  function renderSelected() {
    if (countBox) countBox.textContent = `${selectedFiles.length}ファイル選択`;
    if (listBox)  listBox.innerHTML = selectedFiles.map(f => `<div class="small text-muted">${f.name} (${(f.size/1024/1024).toFixed(2)}MB)</div>`).join('');
  }
  function addFiles(files) {
    const pdfs = Array.from(files).filter(f => f.type === 'application/pdf' || f.name.toLowerCase().endsWith('.pdf'));
    selectedFiles = selectedFiles.concat(pdfs);
    renderSelected();
    updateButtonState();
  }
  function clearAll() {
    selectedFiles = [];
    if (fileInput) fileInput.value = '';
    renderSelected();
    updateButtonState();
    // also clear any previous results/export state if needed (existing function may be clearResultsAndDisableExports())
    if (typeof clearResultsAndDisableExports === 'function') clearResultsAndDisableExports();
  }

  // --- file dialog ---
  if (fileInput) {
    fileInput.addEventListener('change', (e) => {
      addFiles(e.target.files);
      // allow selecting the same file again later
      e.target.value = '';
    });
  }

  // --- if the browse trigger is an anchor, stop navigation ---
  const browseAnchor = document.getElementById('browseAnchor');
  if (browseAnchor) {
    browseAnchor.addEventListener('click', (e) => {
      e.preventDefault();
      fileInput?.click();
    });
  }

  // --- drag & drop ---
  if (dropZone) {
    ['dragenter','dragover','dragleave','drop'].forEach(ev => {
      dropZone.addEventListener(ev, (e) => { e.preventDefault(); e.stopPropagation(); });
    });
    dropZone.addEventListener('drop', (e) => {
      addFiles(e.dataTransfer.files);
    });
  }

  // --- upload action ---
  if (uploadBtn) {
    uploadBtn.addEventListener('click', async () => {
      if (selectedFiles.length === 0) return;
      const fd = new FormData();
      selectedFiles.forEach(f => fd.append('files', f, f.name)); // APPEND for multi files

      uploadBtn.disabled = true;
      try {
        const res  = await fetch('/api/upload', { method: 'POST', body: fd });
        const json = await res.json();
        // call existing renderer the page already uses (keep current behavior)
        if (typeof renderTable === 'function') {
          renderTable(json);
        } else {
          console.log(json);
        }
      } finally {
        uploadBtn.disabled = false;
      }
    });
  }

  // expose clearAll if you already have a “クリア” button that calls it
  window.__invoice_clearAll = clearAll;

  // initial state
  updateButtonState();
})();
</script>

3) Server side guard (Flask) – only if needed; ensure /api/upload uses getlist:
files = request.files.getlist('files')
# validate and loop over ‘files’, not just files[0]

Acceptance:
- Drag & drop two PDFs → “2ファイル選択”表示、ボタンが有効になり、押下で2件ともテーブルに出る。
- ダイアログで複数選択 → 画面がリセットされず、件数とファイル名が残る。
- クリアで件数/リスト/結果/エクスポートが初期化。
Keep everything else unchanged.