Please update the spec and code with the following locked requirements. Apply them now and rebuild:

[Endpoints]
- GET /healthz -> return 200 {"ok":true}
- GET /selfcheck?pw=ADMIN_PASSWORD -> append a dummy row to Google Sheets and return {"ok":true}
- GET /upload -> simple drag&drop UI (Bootstrap) for multiple PDFs
- POST /api/upload -> accept 1..N PDFs (multipart/form-data), process in-memory, return JSON list and append rows to Google Sheets

[Secrets names (Replit Secrets)]
- SHEET_ID
- GOOGLE_SERVICE_ACCOUNT_JSON  (raw JSON string of service account)
- ADMIN_PASSWORD

[Google Sheets columns order]
timestamp, file_name, vendor, invoice_no, issue_date, currency, subtotal, tax, total, confidence, needs_review, notes, raw_text

[PDF parsing]
- Use pdfplumber as primary (built on pdfminer.six) with a graceful fallback to plain text extraction.
- Add a simple vendor-specific regex dictionary hook (YAML/JSON) but keep it optional in the first build.

[Validation & limits]
- PDF only. Max 10 MB per file. Clear JSON error when invalid.
- Process in-memory, do not persist uploads on disk.

[API response shape for POST /api/upload]
{
  "results":[
    { "file":"xxx.pdf","ok":true,
      "fields":{"vendor":"...","invoice_no":"...","issue_date":"YYYY-MM-DD","currency":"JPY",
                "subtotal":12345,"tax":1234,"total":13579,"confidence":0.82,"needs_review":false,"notes":""},
      "sheet_row": 42
    }, ...
  ]
}

[CORS]
- Allow localhost and *.pages.dev (for future external testing)

[Pin dependencies (requirements.txt)]
fastapi==0.111.0
uvicorn[standard]==0.30.0
pdfplumber==0.11.0
pdfminer.six==20231228
pydantic==2.7.4
gspread==6.1.2
google-auth==2.34.0
google-auth-httplib2==0.2.0
oauth2client==4.1.3
python-multipart==0.0.9

[README]
- How to create a Service Account, paste GOOGLE_SERVICE_ACCOUNT_JSON, set SHEET_ID and ADMIN_PASSWORD
- Share the sheet with the service-account email (Editor)
- curl examples for /api/upload (single & multiple)
- How to run /selfcheck and expected row result