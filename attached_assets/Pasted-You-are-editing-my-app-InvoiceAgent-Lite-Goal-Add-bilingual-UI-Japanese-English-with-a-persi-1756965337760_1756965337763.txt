You are editing my app “InvoiceAgent Lite”.
Goal: Add bilingual UI (Japanese ↔ English) with a persistent toggle, without changing any API routes or JSON field keys.

Requirements
- Keep API response keys (amount, date, vendor, confidence, needs_review, sheet_status, raw_excerpt, etc.) in English.
- Add language detection order: URL ?lang=xx > cookie "lang" > Accept-Language header > default "ja".
- Support exactly two locales: "ja" and "en".
- Add a small language switcher in the header on /upload and /settings: “日本語 | English”. The active one is disabled.
- Persist the choice in a cookie "lang" (max-age 180 days). Also keep the current page on switch (?next=<current path>).

Implementation
1) Create `data/i18n.py` (or `data/i18n.json`) with dictionaries:

i18n = {
  "ja": {
    "title": "インボイス自動読取 Lite",
    "drop_headline": "ここにPDFをドラッグ＆ドロップ、またはクリックして選択",
    "subnote": "PDFのみ、1ファイル最大3MB",
    "browse_btn": "ファイルを選択",
    "upload_btn": "アップロードして解析",
    "results_section": "解析結果",
    "help_note": "※アップロードされたファイルはサーバーに保存せず、解析後に破棄します。",
    "val_not_pdf": "PDFファイルのみ対応しています。",
    "val_too_large": "ファイルサイズが上限（3MB）を超えています。",
    "summary": "検出結果：日付={date} / 金額={amount}円 / 発行元={vendor}（信頼度={confidence}）",
    "settings_title": "Googleスプレッドシート連携",
    "status_label": "状態：",
    "status_connected": "接続済み",
    "status_not_connected": "未接続",
    "service_json": "サービスアカウントJSON",
    "service_json_ph": "Google CloudのサービスアカウントJSONをここに貼り付け",
    "sheet_id": "シートID",
    "sheet_name": "シート名",
    "save_test": "保存して接続テスト",
    "csv_dl": "CSVをダウンロード",
    "help_step1": "Google Cloud でサービスアカウントのJSONキーを作成",
    "help_step2": "対象のスプレッドシートにサービスアカウントのメールを“編集者”で共有",
    "help_step3": "シートID（URLの /d/ と /edit の間）とシート名（タブ名）を入力して保存",
    "toast_success": "接続に成功しました。テスト行を書き込み後に削除しました。",
    "err_perm": "権限エラー：スプレッドシートでサービスアカウントに編集権限を付与してください。",
    "err_json": "フォーマットエラー：有効なJSONではありません。",
    "err_sheet": "シートが見つかりません。シートID/シート名を確認してください。",
    "lang_jp": "日本語",
    "lang_en": "English"
  },
  "en": {
    "title": "InvoiceAgent Lite",
    "drop_headline": "Drag & drop PDFs here or click to browse",
    "subnote": "PDF only, max 3MB per file",
    "browse_btn": "Browse Files",
    "upload_btn": "Upload and Process",
    "results_section": "Processing Results",
    "help_note": "* Files are not stored on the server; they are discarded after processing.",
    "val_not_pdf": "Only PDF files are supported.",
    "val_too_large": "File exceeds the 3MB size limit.",
    "summary": "Detected: date={date} / amount={amount} / vendor={vendor} (confidence={confidence})",
    "settings_title": "Google Sheets Connection",
    "status_label": "Status: ",
    "status_connected": "Connected",
    "status_not_connected": "Not Connected",
    "service_json": "Service Account JSON",
    "service_json_ph": "Paste your Google service account JSON here",
    "sheet_id": "Sheet ID",
    "sheet_name": "Sheet Name",
    "save_test": "Save & Test Connection",
    "csv_dl": "Download CSV",
    "help_step1": "Create a JSON key for a service account in Google Cloud",
    "help_step2": "Share your sheet with the service account email as Editor",
    "help_step3": "Enter Sheet ID (URL /d/.../edit) and Sheet Name (tab name), then save",
    "toast_success": "Connected successfully. Wrote and removed a test row.",
    "err_perm": "Permission error: grant Editor access to the service account on the sheet.",
    "err_json": "Format error: invalid JSON.",
    "err_sheet": "Sheet not found. Check Sheet ID/Sheet Name.",
    "lang_jp": "日本語",
    "lang_en": "English"
  }
}

2) In the backend, add helpers (no route name changes):
- `get_lang(request)` resolves language by: request.query_params["lang"] -> cookie "lang" -> Accept-Language -> "ja".
- `t(key, lang)` returns i18n[lang].get(key, i18n["en"].get(key, key)).
- Add a small route `/lang` that sets the "lang" cookie and redirects to `next` param (or "/upload").

Example (pseudo):
  @app.get("/lang")
  def set_lang(lang: str = "ja", next: str = "/upload"):
      resp = RedirectResponse(url=next, status_code=302)
      resp.set_cookie("lang", lang, max_age=15552000)  # 180 days
      return resp

3) Update templates for /upload and /settings:
- Set `<html lang="{{ lang }}">` and `<meta charset="UTF-8">`.
- Add a top-right language switcher:
  `<nav class="..."> <a href="/lang?lang=ja&next={{ request.url.path }}"> {{ t("lang_jp", lang) }}</a> | <a href="/lang?lang=en&next={{ request.url.path }}"> {{ t("lang_en", lang) }}</a> </nav>`
  Render the active language as plain text (no link).

- Replace all visible strings with `{{ t("key", lang) }}` and keep the JSON result block untouched.
- Above the JSON, render the summary line using the current response values with fallbacks (“不明” / “N/A”).

4) Make sure both routes pass `lang` into the template context:
  lang = get_lang(request)
  return TemplateResponse("upload.html", {"request": request, "lang": lang, "t": lambda k: t(k, lang)})

5) Acceptance:
- Visiting `/upload?lang=en` shows English UI; `/upload?lang=ja` shows Japanese.
- Clicking “日本語 | English” toggles and persists via cookie across pages.
- API responses and JSON keys remain unchanged.